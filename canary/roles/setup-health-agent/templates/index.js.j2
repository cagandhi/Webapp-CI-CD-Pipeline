const redis = require('redis');
const util  = require('util');
const os = require('os');
const si = require('systeminformation');

var cnt = 0;

// Calculate metrics.
// TASK 1:
class Agent
{
    memoryLoad()
    {
       let memUsed = ((os.totalmem()-os.freemem())*100)/os.totalmem();
       // console.log( os.totalmem(), os.freemem() );
       return memUsed;
    }
    async cpu()
    {
       let load = await si.currentLoad();
       return load.currentload;
    }
}

(async () =>
{
    // Get agent name from command line.
    let args = process.argv.slice(2);
    main(args[0]);

})();


async function main(name)
{
    let agent = new Agent();

    let connection = redis.createClient(6379, '{{ proxyIp }}', {})
    connection.on('error', function(e)
    {
        console.log(e);
        process.exit(1);
    });
    
    //let client = {};
    //client.publish = util.promisify(connection.publish).bind(connection);

    // Push update ever 1 second
    var inte = setInterval(async function func() {
        if(cnt > 118) {
            clearInterval(inte);
        }

        let payload = {
            memoryLoad: agent.memoryLoad(),
            cpu: await agent.cpu(),
            timestamp: ((new Date()).getTime()/1000),
        };
        let msg = JSON.stringify(payload);
        //await client.publish(name, msg);
        await connection.lpush(name, msg);
        console.log(`${name} ${msg}`);
        cnt++;
    }, 1000);

}



